// Table {{ .Name }}

var {{ .NameNormalized }}Fields = []string{ {{ range .Columns }} "{{ .Name }}",{{ end }} }

{{ if .HasCompositeId }}
type {{ .NameNormalized }}PrimaryKey struct {
{{ range .ColumnIds }}    {{ .NameNormalized }} {{ .Type }} `json:"{{ .NameJson }}" db:"{{ .Name }}"`
{{ end }}
}
type {{ .NameNormalized }}PrimaryKeySerialized = {{ .NameNormalized }}PrimaryKey
{{ else }}
type {{ .NameNormalized }}PrimaryKey = {{ (index .ColumnIds 0).Type }}
type {{ .NameNormalized }}PrimaryKeySerialized struct {
{{ range .ColumnIds }}    {{ .NameNormalized }} {{ .Type }} `json:"{{ .NameJson }}" db:"{{ .Name }}"`
{{ end }}
}
{{ end }}

type {{ .NameNormalized }}Model struct {
{{ range .Columns }}    {{ .NameNormalized }} {{ .Type }} `json:"{{ .NameJson }}" db:"{{ .Name }}"`
{{ end }}}

type {{ .NameNormalized }}Create struct {
{{ if not .HasCompositeId }}
{{ range .ColumnsCreate }}    {{ .NameNormalized }} {{ .Type }} `json:"{{ .NameJson }}" db:"{{ .Name }}"`
{{ end }}
{{ else }}
{{ range .ColumnsUpdate }}    {{ .NameNormalized }} {{ .Type }} `json:"{{ .NameJson }}" db:"{{ .Name }}"`
{{ end }}
{{ end }}}

type {{ .NameNormalized }}Update struct {
{{ range .ColumnsUpdate }}    {{ .NameNormalized }} {{ .Type }} `json:"{{ .NameJson }}" db:"{{ .Name }}"`
{{ end }}}

type {{ .NameNormalized }}Queries struct {
    ctx *DBContext
    // Used to modify {{ .NameNormalized }} queries (filter, pagination, search, ...)
    //
    // Usage:
    //   users, err := db.{{ .NameNormalized }}.FindMany(
    //     db.{{ .NameNormalized }}.Query.DeletedAt.IsNotNull(),
    //     db.{{ .NameNormalized }}.Query.Name.OrderAsc(),
    //     # add more conditions ...
    //   )
    Query {{ .NameNormalized }}Filters
}

type {{ .NameNormalized }}Filters struct {
{{ range.GetFieldFilters }}{{ .Name }} {{ .Type }}[{{ .FieldType }}]
{{ end }}
}

func ({{ .NameNormalized }}Filters) Offset(val uint64) WhereCondition {
    return func(cond SelectBuilder) SelectBuilder {
		return cond.Offset(val)
	}
}

func ({{ .NameNormalized }}Filters) Limit(val uint64) WhereCondition {
    return func(cond SelectBuilder) SelectBuilder {
		return cond.Limit(val)
	}
}

func ({{ .NameNormalized }}Filters) Distinct() WhereCondition {
    return func(cond SelectBuilder) SelectBuilder {
		return cond.Distinct()
	}
}

// Create a new {{ .NameNormalized }}Model instance (not automatically saved in database)
//
// Example :
//   {{ .Name }} = db.{{ .NameNormalized }}.New()
//   {{ .Name }}.Name = "newName"
//   // ... manipulate the {{ .Name }} entity
//   err = {{ .Name }}.Save(db)
func (q *{{ .NameNormalized }}Queries) New() *{{ .NameNormalized }}Model {
    return &{{ .NameNormalized }}Model{
        {{ range .GetPrimaryKeyConstructors }}{{ .Name }}: {{ .Init }},
        {{ end }}
    }
}

// Save a {{ .NameNormalized }}Model
//
// Usage:
//   user, err = db.User.FindById(id)
//   user.Name = "newName"
//   err = user.Save(db)
func (q *{{ .NameNormalized }}Model) Save(db *DBClient) error {
    data, err := db.{{ .NameNormalized }}.Upsert({{ .NameNormalized }}Update{
        {{ range .ColumnsUpdate }}          {{ .NameNormalized }}: q.{{ .NameNormalized }},
        {{ end }}
    })
    *q = *data
    return err
}

