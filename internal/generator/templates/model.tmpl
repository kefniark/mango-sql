// Table {{ .Table.Name }}

var {{ .Table.NameNormalized }}Fields = []string{ {{ range .Table.Columns }} "{{ .Name }}",{{ end }} }

{{ if .Table.HasCompositeID }}
type {{ .Table.NameNormalized }}PrimaryKey struct {
{{ range .Table.ColumnIDs }}    {{ .NameNormalized }} {{ .Type }} `json:"{{ .NameJSON }}" db:"{{ .Name }}"`
{{ end }}
}
type {{ .Table.NameNormalized }}PrimaryKeySerialized = {{ .Table.NameNormalized }}PrimaryKey
{{ else }}
type {{ .Table.NameNormalized }}PrimaryKey = {{ (index .Table.ColumnIDs 0).Type }}
type {{ .Table.NameNormalized }}PrimaryKeySerialized struct {
{{ range .Table.ColumnIDs }}    {{ .NameNormalized }} {{ .Type }} `json:"{{ .NameJSON }}" db:"{{ .Name }}"`
{{ end }}
}
{{ end }}

type {{ .Table.NameNormalized }}Model struct {
{{ range .Table.Columns }}    {{ .NameNormalized }} {{ .Type }} `json:"{{ .NameJSON }}" db:"{{ .Name }}"`
{{ end }}}

type {{ .Table.NameNormalized }}Create struct {
{{ if not .Table.HasCompositeID }}
{{ range .Table.ColumnsCreate }}    {{ .NameNormalized }} {{ .Type }} `json:"{{ .NameJSON }}" db:"{{ .Name }}"`
{{ end }}
{{ else }}
{{ range .Table.ColumnsUpdate }}    {{ .NameNormalized }} {{ .Type }} `json:"{{ .NameJSON }}" db:"{{ .Name }}"`
{{ end }}
{{ end }}}

type {{ .Table.NameNormalized }}Update struct {
{{ range .Table.ColumnsUpdate }}    {{ .NameNormalized }} {{ .Type }} `json:"{{ .NameJSON }}" db:"{{ .Name }}"`
{{ end }}}

type {{ .Table.NameNormalized }}Queries struct {
    ctx *DBContext
    // Used to modify {{ .Table.NameNormalized }} queries (filter, pagination, search, ...)
    //
    // Usage:
    //   users, err := db.{{ .Table.NameNormalized }}.FindMany(
    //     db.{{ .Table.NameNormalized }}.Query.DeletedAt.IsNotNull(),
    //     db.{{ .Table.NameNormalized }}.Query.Name.OrderAsc(),
    //     # add more conditions ...
    //   )
    Query {{ .Table.NameNormalized }}Filters
}

type {{ .Table.NameNormalized }}Filters struct {
{{ range .Table.GetFieldFilters }}{{ .Name }} {{ .Type }}[{{ .FieldType }}]
{{ end }}
}

func ({{ .Table.NameNormalized }}Filters) Offset(val uint64) WhereCondition {
    return func(cond SelectBuilder) SelectBuilder {
		return cond.Offset(val)
	}
}

func ({{.Table.NameNormalized }}Filters) Limit(val uint64) WhereCondition {
    return func(cond SelectBuilder) SelectBuilder {
		return cond.Limit(val)
	}
}

func ({{ .Table.NameNormalized }}Filters) Distinct() WhereCondition {
    return func(cond SelectBuilder) SelectBuilder {
		return cond.Distinct()
	}
}

// Create a new {{ .Table.NameNormalized }}Model instance (not automatically saved in database)
//
// Example :
//   {{ .Table.Name }} = db.{{ .Table.NameNormalized }}.New()
//   {{ .Table.Name }}.Name = "newName"
//   // ... manipulate the {{ .Table.Name }} entity
//   err = {{ .Table.Name }}.Save(db)
func (q *{{ .Table.NameNormalized }}Queries) New() *{{ .Table.NameNormalized }}Model {
    return &{{ .Table.NameNormalized }}Model{
        {{ range .Table.GetPrimaryKeyConstructors }}{{ .Name }}: {{ .Init }},
        {{ end }}
    }
}

// Save a {{ .Table.NameNormalized }}Model
//
// Usage:
//   user, err = db.User.FindById(id)
//   user.Name = "newName"
//   err = user.Save(db)
func (q *{{ .Table.NameNormalized }}Model) Save(db *DBClient) error {
    data, err := db.{{ .Table.NameNormalized }}.Upsert({{ .Table.NameNormalized }}Update{
        {{ range .Table.ColumnsUpdate }}          {{ .NameNormalized }}: q.{{ .NameNormalized }},
        {{ end }}
    })
    *q = *data
    return err
}

