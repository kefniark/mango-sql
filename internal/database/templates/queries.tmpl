// Insert a {{ .Table.NameNormalized }} and return the created row
//
// Usage:
//   entity, err := db.{{ .Table.NameNormalized }}.Insert({{ .Table.NameNormalized }}Create{
//     // ...
//   })
func (q *{{ .Table.NameNormalized }}Queries) Insert(input {{ .Table.NameNormalized }}Create) (requestData *{{ .Table.NameNormalized }}Model, requestErr error) {
	const sql = `{{ .Table.GetCreateSqlContent }}`{{ if .Logger.HasLogger }}
	start := time.Now()
	defer func() {
		q.ctx.logQuery(Debug, "DB.{{ .Table.NameNormalized }}.Insert", requestErr, time.Since(start), sql, input)
	}(){{ end }}
	return QueryOne[{{ .Table.NameNormalized }}Model](q.ctx, sql, {{ range .Table.GetPrimaryKeyConstructors }} {{ .Init }}, {{ end }} {{ range .Table.ColumnsCreate }}{{ if .IsArray }}pq.Array(input.{{ .NameNormalized }}), {{ else }}input.{{ .NameNormalized }}, {{ end }}{{ end }})
}

// Batch Insert {{ .Table.NameNormalized }}
//
// Usage:
//   entities, err := db.{{ .Table.NameNormalized }}.InsertMany([]{{ .Table.NameNormalized }}Create{
//     // ...
//   })
func (q *{{ .Table.NameNormalized }}Queries) InsertMany(inputs []{{ .Table.NameNormalized }}Create) (requestData []{{ .Table.NameNormalized }}PrimaryKeySerialized, requestErr error) {
	const sql = `{{ .Table.GetCreateManySqlContent }}`{{ if .Logger.HasLogger }}
	start := time.Now()
	defer func() {
		q.ctx.logQuery(Debug, "DB.{{ .Table.NameNormalized }}.InsertMany", requestErr, time.Since(start), sql, inputs)
	}(){{ end }}
	ids := make([]{{ .Table.NameNormalized }}PrimaryKeySerialized, 0, len(inputs))
	for _, chunk := range chunkBy(inputs, 250) {
		records := make([]{{ .Table.NameNormalized }}Update, len(chunk))
		{{ if $.HasUUID }}uuid.EnableRandPool()
		{{ end }}for i, input := range chunk {
			records[i] = {{ if and (not .Table.HasCompositeId) (not .Table.HasStructCopy) }}{{ .Table.NameNormalized }}Update{
				{{ range .Table.GetPrimaryKeyConstructors }}          {{ .Name }}: {{ .Init }},
        		{{ end }}{{ range .Table.ColumnsCreate }}          {{ .NameNormalized }}: input.{{ .NameNormalized }},
				{{ end }}
			}{{ else }}{{ .Table.NameNormalized }}Update(input){{ end }}
		}
		{{ if $.HasUUID }}uuid.DisableRandPool()
		{{ end }}
		data, err := json.Marshal(records)
		if err != nil {
			return nil, err
		}

		if res, err := QueryMany[{{ .Table.NameNormalized }}PrimaryKeySerialized](q.ctx, sql, data); err != nil {
			return nil, err
		} else {
			ids = append(ids, res...)
		}
	}

	return ids, nil
}

// Upsert a {{ .Table.NameNormalized }} (create or update if already exist) and return the updated row
//
// Usage:
//   entity, err := db.{{ .Table.NameNormalized }}.Upsert({{ .Table.NameNormalized }}Update{
//     // ...
//   })
func (q *{{ .Table.NameNormalized }}Queries) Upsert(input {{ .Table.NameNormalized }}Update) (requestData *{{ .Table.NameNormalized }}Model, requestErr error) {
	const sql = `{{ .Table.GetUpsertSqlContent }}`{{ if .Logger.HasLogger }}
	start := time.Now()
	defer func() {
		q.ctx.logQuery(Debug, "DB.{{ .Table.NameNormalized }}.Upsert", requestErr, time.Since(start), sql, input)
	}(){{ end }}
	return QueryOne[{{ .Table.NameNormalized }}Model](q.ctx, sql, {{ range .Table.ColumnsUpdate }}input.{{ .NameNormalized }}, {{ end }});
}

// Batch Upsert {{ .Table.NameNormalized }} (create or update if already exist)
//
// Usage:
//   entities, err := db.{{ .Table.NameNormalized }}.UpsertMany([]{{ .Table.NameNormalized }}Update{
//     // ...
//   })
func (q *{{ .Table.NameNormalized }}Queries) UpsertMany(inputs []{{ .Table.NameNormalized }}Update) (requestData []{{ .Table.NameNormalized }}PrimaryKeySerialized, requestErr error) {
	const sql = `{{ .Table.GetUpsertManySqlContent }}`{{ if .Logger.HasLogger }}
	start := time.Now()
	defer func() {
		q.ctx.logQuery(Debug, "DB.{{ .Table.NameNormalized }}.UpsertMany", requestErr, time.Since(start), sql, inputs)
	}(){{ end }}
	ids := make([]{{ .Table.NameNormalized }}PrimaryKeySerialized, 0, len(inputs))
	for _, chunk := range chunkBy(inputs, 250) {
		data, err := json.Marshal(chunk)
		if err != nil {
			return nil, err
		}

		if res, err := QueryMany[{{ .Table.NameNormalized }}PrimaryKeySerialized](q.ctx, sql, data); err != nil {
			return nil, err
		} else {
			ids = append(ids, res...)
		}
	}

	return ids, nil
}

// Update a {{ .Table.NameNormalized }} and return the updated row
//
// Usage:
//   entity, err := db.{{ .Table.NameNormalized }}.Update({{ .Table.NameNormalized }}Update{
//     // ...
//   })
func (q *{{ .Table.NameNormalized }}Queries) Update(input {{ .Table.NameNormalized }}Update) (requestData *{{ .Table.NameNormalized }}Model, requestErr error) {
	const sql = `{{ .Table.GetUpdateSqlContent }}`{{ if .Logger.HasLogger }}
	start := time.Now()
	defer func() {
		q.ctx.logQuery(Debug, "DB.{{ .Table.NameNormalized }}.Update", requestErr, time.Since(start), sql, input)
	}(){{ end }}
	return QueryOne[{{ .Table.NameNormalized }}Model](q.ctx, sql, {{ range .Table.ColumnsUpdate }}input.{{ .NameNormalized }}, {{ end }})
}

// Batch Update {{ .Table.NameNormalized }}
//
// Usage:
//   entities, err := db.{{ .Table.NameNormalized }}.UpdateMany([]{{ .Table.NameNormalized }}Update{
//     // ...
//   })
func (q *{{ .Table.NameNormalized }}Queries) UpdateMany(inputs []{{ .Table.NameNormalized }}Update) (requestData []{{ .Table.NameNormalized }}PrimaryKeySerialized, requestErr error) {
	const sql = `{{ .Table.GetUpdateManySqlContent }}`{{ if .Logger.HasLogger }}
	start := time.Now()
	defer func() {
		q.ctx.logQuery(Debug, "DB.{{ .Table.NameNormalized }}.UpdateMany", requestErr, time.Since(start), sql, inputs)
	}(){{ end }}
	ids := make([]{{ .Table.NameNormalized }}PrimaryKeySerialized, 0, len(inputs))
	for _, chunk := range chunkBy(inputs, 250) {
		data, err := json.Marshal(chunk)
		if err != nil {
			return nil, err
		}

		if res, err := QueryMany[{{ .Table.NameNormalized }}PrimaryKeySerialized](q.ctx, sql, data); err != nil {
			return nil, err
		} else {
			ids = append(ids, res...)
		}
	}

	return ids, nil
}

{{ if .Table.GetDeleteSoftSqlName }}// Delete a {{ .Table.NameNormalized }} (soft delete, data are still in the database)
//
// Usage:
//   err := db.{{ .Table.NameNormalized }}.DeleteSoft(id)
func (q *{{ .Table.NameNormalized }}Queries) DeleteSoft(id {{ .Table.NameNormalized }}PrimaryKey) (requestErr error) {
	sql := `{{ .Table.GetDeleteSoftSqlContent }}`{{ if .Logger.HasLogger }}
	start := time.Now()
	defer func() {
		q.ctx.logQuery(Debug, "DB.{{ .Table.NameNormalized }}.DeleteSoft", requestErr, time.Since(start), sql, id)
	}(){{ end }}
	return Exec(q.ctx, sql, id)
}

// Delete a {{ .Table.NameNormalized }} (soft delete, data are still in the database)
func (q *{{ .Table.NameNormalized }}Model) DeleteSoft(db *DBClient) error {
   {{ if .Table.HasCompositeId }}return db.{{ .Table.NameNormalized }}.DeleteSoft({{ .Table.NameNormalized }}PrimaryKey{
		{{ range .Table.ColumnIds }}    {{ .NameNormalized }}: q.{{ .NameNormalized }},
		{{ end }}
	}){{ else }}return db.{{ .Table.NameNormalized }}.DeleteSoft(q.Id){{ end }}
}{{end}}

// Delete a {{ .Table.NameNormalized }} (hard delete, data are removed from the database)
//
// Usage:
//   err := db.{{ .Table.NameNormalized }}.DeleteHard(id)
func (q *{{ .Table.NameNormalized }}Queries) DeleteHard(id {{ .Table.NameNormalized }}PrimaryKey) (requestErr error) {
	sql := `{{ .Table.GetDeleteHardSqlContent }}`{{ if .Logger.HasLogger }}
	start := time.Now()
	defer func() {
		q.ctx.logQuery(Debug, "DB.{{ .Table.NameNormalized }}.DeleteHard", requestErr, time.Since(start), sql, id)
	}(){{ end }}
	return Exec(q.ctx, sql, id)
}

// Delete a {{ .Table.NameNormalized }} (hard delete, data are removed from the database)
func (q *{{ .Table.NameNormalized }}Model) DeleteHard(db *DBClient) error {
	{{ if .Table.HasCompositeId }}return db.{{ .Table.NameNormalized }}.DeleteHard({{ .Table.NameNormalized }}PrimaryKey{
		{{ range .Table.ColumnIds }}    {{ .NameNormalized }}: q.{{ .NameNormalized }},
		{{ end }}
	}){{ else }}return db.{{ .Table.NameNormalized }}.DeleteHard({{ range .Table.ColumnIds }}q.{{ .NameNormalized }},{{ end }}){{ end }}
}

// Count {{ .Table.NameNormalized }} records based on filter conditions
//
// Usage:
//   count, err := db.{{ .Table.NameNormalized }}.Count(
//     // ... can use filters here (cf db.{{ .Table.NameNormalized }}.Query.*)
//   )
func (q *{{ .Table.NameNormalized }}Queries) Count(filters ...WhereCondition) (requestData int, requestErr error) {
	query := squirrel.Select("count(*)").From("{{ .Table.Name }}").PlaceholderFormat(placeholder)
	for _, filter := range filters {
		query = filter(query)
	}

	sql, args, err := query.ToSql()
	if err != nil {
		return 0, err
	}{{ if .Logger.HasLogger }}
	start := time.Now()
	defer func() {
		q.ctx.logQuery(Debug, "DB.{{ .Table.NameNormalized }}.Count", requestErr, time.Since(start), sql, args)
	}(){{ end }}

	var count int
	err = QueryRow(q.ctx, &count, sql, args...)
	return count, err
}

// Find {{ .Table.NameNormalized }} records based on the provided conditions
//
// Usage:
//   entities, err := db.{{ .Table.NameNormalized }}.FindMany(
//     // ... can use filters here (cf db.{{ .Table.NameNormalized }}.Query.*)
//   )
func (q *{{ .Table.NameNormalized }}Queries) FindMany(filters ...WhereCondition) (requestData []{{ .Table.NameNormalized }}Model, requestErr error) {
	query := squirrel.Select({{ .Table.NameNormalized }}Fields...).From("{{ .Table.Name }}").PlaceholderFormat(placeholder)
	for _, filter := range filters {
		query = filter(query)
	}

	sql, args, err := query.ToSql()
	if err != nil {
		return nil, err
	}{{ if .Logger.HasLogger }}
	start := time.Now()
	defer func() {
		q.ctx.logQuery(Debug, "DB.{{ .Table.NameNormalized }}.FindMany", requestErr, time.Since(start), sql, args)
	}(){{ end }}

	return QueryMany[{{ .Table.NameNormalized }}Model](q.ctx, sql, args...)
}

// Find one {{ .Table.NameNormalized }} records based on the provided conditions
//
// Usage:
//   entity, err := db.{{ .Table.NameNormalized }}.FindUnique(
//     // ... can use filters here (cf db.{{ .Table.NameNormalized }}.Query.*)
//   )
func (q *{{ .Table.NameNormalized }}Queries) FindUnique(filters ...WhereCondition) (*{{ .Table.NameNormalized }}Model, error) {
	filters = append(filters, limitFirst)
	return first(q.FindMany(filters...))
}

{{ range .Table.GetSelectPrimarySql }}
// Find {{ .Name }} By PrimaryKey
//
// Usage:
//   entity, err := db.{{ .Name }}.{{ .Method }}(id)
func (q *{{ .Name }}Queries) {{ .Method }}(id {{ .Name }}PrimaryKey) (*{{ .Name }}Model, error) {
	return q.FindUnique(func(cond SelectBuilder) SelectBuilder {
		{{ if $.Table.HasCompositeId }}return cond{{ range $i, $f := .Fields }}.Where("{{ $f.Name }} = ${{ len (printf "a%*s" $i "") }}", id.{{ $f.NameNormalized }}){{ end }}
		{{ else }}return cond{{ range .Fields }}.Where("{{ .Name }} = $1", id){{ end }}{{ end }}
	})
}

{{ if not $.Table.HasCompositeId }}// Batch Find {{ .Name }} By PrimaryKey
//
// Usage:
//   entities, err := db.{{ .Name }}.{{ .Method }}s(ids)
func (q *{{ .Name }}Queries) {{ .Method }}s(ids ...{{ .Name }}PrimaryKey) ([]{{ .Name }}Model, error) {
	return q.FindMany(func(cond SelectBuilder) SelectBuilder {
		return cond{{ range .Fields }}.Where("{{ .Name }} = ANY($1)", pq.Array(ids)){{ end }}
	})
}
{{ end }}{{ end }}
